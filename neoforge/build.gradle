plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    modRuntimeOnly("dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-neoforge") { transitive false }
    //include("dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-neoforge")
    forgeRuntimeLibrary("org.quiltmc.parsers:json:0.2.1")
    forgeRuntimeLibrary("org.quiltmc.parsers:gson:0.2.1")


    modImplementation("net.blay09.mods:balm-neoforge:${project.balm_version}")
    modImplementation("net.blay09.mods:craftingtweaks-neoforge:${project.crafting_tweaks_version}")
    modRuntimeOnly("net.blay09.mods:kuma-api-neoforge:${project.kuma_api_version}")

    switch("${active_item_viewer}") {
        case "rei":
            modImplementation "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
            break
        case "emi":
            modCompileOnly "dev.emi:emi-neoforge:${emi_version}:api"
            modLocalRuntime "dev.emi:emi-neoforge:${emi_version}"
            break
        case "jei":
            modLocalRuntime "mezz.jei:jei-1.21.1-neoforge:${jei_version}"
            break
        default:
            break
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}