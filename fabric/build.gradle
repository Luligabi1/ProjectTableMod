plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        exclude module: "fabric-api"
    }
    modRuntimeOnly("dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-fabric") { transitive false }
    //include("dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-fabric")
    modRuntimeOnly("org.quiltmc.parsers:json:0.2.1")
    modRuntimeOnly("org.quiltmc.parsers:gson:0.2.1")

    modImplementation("net.blay09.mods:balm-fabric:${project.balm_version}")
    modImplementation("net.blay09.mods:craftingtweaks-fabric:${project.crafting_tweaks_version}")
    modRuntimeOnly("net.blay09.mods:kuma-api-fabric:${project.kuma_api_version}")


    switch("${active_item_viewer}") {
        case "rei":
            modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
            break
        case "emi":
            modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
            modLocalRuntime "dev.emi:emi-fabric:${emi_version}"
            break
        default:
            break
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}